@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@inject IArtistService ArtistService
@inject ITrackService TrackService

@using Chinook.Services.Interfaces
@using Chinook.Models
@using Chinook.ClientModels
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="SelectedExistingPlaylist">
                <option value="">-- Select a Playlist --</option>
                <option value="Playlist 1">Playlist 1</option>
                <option value="Playlist 2">Playlist 2</option>
                <option value="Playlist 3">Playlist 3</option>
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="NewPlaylistName">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="() => AddTrackToPlaylist(SelectedExistingPlaylist, NewPlaylistName)">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }

    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }
    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private string SelectedExistingPlaylist { get; set; }
    private string NewPlaylistName { get; set; }


    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();
        Artist =  ArtistService.GetArtist(ArtistId);
        Tracks =  ArtistService.GetTracks(ArtistId, CurrentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await AuthenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        TrackService.FavoriteTrack(trackId, CurrentUserId);
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        InfoMessage = $"Track {SelectedTrack.ArtistName} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        TrackService.UnfavoriteTrack(trackId, CurrentUserId);
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        InfoMessage = $"Track {SelectedTrack.ArtistName} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} removed from favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private void AddTrackToPlaylist(string selectedExistingPlaylist, string newPlaylistName)
    {
        var targetPlaylistName = !string.IsNullOrWhiteSpace(newPlaylistName) ? newPlaylistName : selectedExistingPlaylist;

        if (!string.IsNullOrEmpty(targetPlaylistName))
        {
            TrackService.AddTrackToPlaylist(SelectedTrack.TrackId, targetPlaylistName, CurrentUserId);
            InfoMessage = $"Track {SelectedTrack.TrackName} added to playlist {targetPlaylistName}.";
        }

        // Reset the modal state for next use
        SelectedExistingPlaylist = string.Empty;
        NewPlaylistName = string.Empty;

        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}
